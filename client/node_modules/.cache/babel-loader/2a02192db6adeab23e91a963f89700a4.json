{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDMWpc2z0nnbT3tIr1Y-qMltUWspuBrLLo\",\n  authDomain: \"crwn-db-ba5aa.firebaseapp.com\",\n  projectId: \"crwn-db-ba5aa\",\n  storageBucket: \"crwn-db-ba5aa.appspot.com\",\n  messagingSenderId: \"760549227482\",\n  appId: \"1:760549227482:web:c4e6d5196172cefc38dee3\",\n  measurementId: \"G-B7Q1E8QCYC\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, ...additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get(); // if user not present we create\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/sushant/Documents/crwn-clothing/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n \r\n        apiKey: \"AIzaSyDMWpc2z0nnbT3tIr1Y-qMltUWspuBrLLo\",\r\n        authDomain: \"crwn-db-ba5aa.firebaseapp.com\",\r\n        projectId: \"crwn-db-ba5aa\",\r\n        storageBucket: \"crwn-db-ba5aa.appspot.com\",\r\n        messagingSenderId: \"760549227482\",\r\n        appId: \"1:760549227482:web:c4e6d5196172cefc38dee3\",\r\n        measurementId: \"G-B7Q1E8QCYC\"\r\n    \r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument=async(userAuth,...additionalData)=>{\r\n    if(!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    const snapshot = await userRef.get();\r\n  \r\n    // if user not present we create\r\n    if(!snapshot.exists){\r\n        const{displayName,email}=userAuth;\r\n        const createdAt=new Date();\r\n\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        }catch(error){\r\n            console.log('error creating user',error.message);\r\n        }\r\n    }\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments=async(collectionKey,objectsToAdd)=>{\r\n    const collectionRef=firestore.collection(collectionKey);\r\n    \r\n    const batch=firestore.batch();\r\n    objectsToAdd.forEach(obj=>{\r\n        const newDocRef=collectionRef.doc();\r\n        batch.set(newDocRef,obj);\r\n    });\r\n\r\n    return await batch.commit()\r\n\r\n\r\n}\r\nexport const convertCollectionsSnapshotToMap=(collections)=>{\r\n     const transformedCollection=collections.docs.map(doc=>{\r\n         const {title,items}=doc.data();\r\n\r\n         return{\r\n             routeName: encodeURI(title.toLowerCase()),\r\n             id: doc.id,\r\n             title,\r\n             items\r\n         }\r\n         \r\n     });\r\n     return transformedCollection.reduce((accumulator,collection)=>{\r\n         accumulator[collection.title.toLowerCase()]=collection;\r\n         return accumulator;\r\n     },{})\r\n}\r\n\r\n\r\nexport const getCurrentUser=()=>{\r\n    return new Promise((resolve,reject)=>{\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth=>{\r\n            unsubscribe();\r\n            resolve(userAuth);}\r\n            ,reject);\r\n        })\r\n    }\r\n\r\n\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider= new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({prompt:'select_account'});\r\nexport const signInWithGoogle=()=>auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}