{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsynch() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  } // collectionRef\n  //   .get()\n  //   .then(async (snapshot) => {\n  //     const collectionsMap = convertCollectionsSnapshottoMap(snapshot);\n  //     dispatch(fetchCollectionSuccess(collectionsMap));\n  //   })\n  //   .catch((error) => dispatch(fetchCollectionFailure(error.message)));\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsynch);\n}","map":{"version":3,"sources":["C:/Users/sushant/Documents/crwn-clothing/crwn-clothing/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionSuccess","fetchCollectionFailure","ShopActionTypes","fetchCollectionsAsynch","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,QAAkC,oBAAlC;AAEA,SAAOC,SAAP,EAAiBC,+BAAjB,QAAuD,+BAAvD;AAEA,SAAOC,sBAAP,EAA8BC,sBAA9B,QAA2D,gBAA3D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,sBAAV,GAAkC;AAErC,MAAG;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAE,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAhC;AACA,UAAMT,GAAG,CAACG,sBAAsB,CAACQ,cAAD,CAAvB,CAAT;AACC,GALD,CAMA,OAAMC,KAAN,EAAY;AACZ,UAAMZ,GAAG,CAACI,sBAAsB,CAACQ,KAAK,CAACC,OAAP,CAAvB,CAAT;AACC,GAVoC,CAarC;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMhB,UAAU,CACZO,eAAe,CAACU,uBADJ,EAEZT,sBAFY,CAAhB;AAIH","sourcesContent":["import {takeLatest,call,put} from 'redux-saga/effects';\r\n\r\nimport{firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nimport{fetchCollectionSuccess,fetchCollectionFailure} from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsynch(){\r\n\r\n    try{\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap= yield call(convertCollectionsSnapshotToMap, snapshot);\r\n    yield put(fetchCollectionSuccess(collectionsMap));\r\n    }\r\n    catch(error){\r\n    yield put(fetchCollectionFailure(error.message));     \r\n    }\r\n\r\n\r\n    // collectionRef\r\n    //   .get()\r\n    //   .then(async (snapshot) => {\r\n    //     const collectionsMap = convertCollectionsSnapshottoMap(snapshot);\r\n    //     dispatch(fetchCollectionSuccess(collectionsMap));\r\n    //   })\r\n    //   .catch((error) => dispatch(fetchCollectionFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsynch\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}