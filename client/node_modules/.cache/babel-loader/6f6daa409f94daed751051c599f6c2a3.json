{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user-types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user-actions';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // sign in with google\n\nexport function* signInWithGoogle() {\n  try {\n    // api calls\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} // sign in with email\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // api calls\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // SESSION\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // SIGN-OUT\n\nexport function* userSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, userSignOut);\n} // SIGN UP START\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n} //Sign Up SUCCESS\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n} // root user sagas\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/sushant/Documents/crwn-clothing/crwn-clothing/client/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSignOut","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","signInAfterSignUp","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user-types';\r\n\r\nimport {auth,googleProvider,createUserProfileDocument,getCurrentUser} from '../../firebase/firebase.utils';\r\n\r\n\r\nimport {signInSuccess,signInFailure,signOutSuccess,signOutFailure,signUpSuccess,signUpFailure} from './user-actions';\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth,additionalData){\r\n    try{\r\n        const userRef=yield call(createUserProfileDocument,userAuth,additionalData);\r\n        const userSnapshot=yield userRef.get();\r\n        \r\n        yield put(signInSuccess({id:userSnapshot.id,...userSnapshot.data()}))\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n    \r\n}\r\n\r\n\r\n// sign in with google\r\nexport function* signInWithGoogle(){\r\n    try{\r\n        // api calls\r\n        const {user}=yield auth.signInWithPopup(googleProvider);\r\n        const userRef=yield call(createUserProfileDocument,user);\r\n        const userSnapshot=yield userRef.get();\r\n        \r\n        yield put(signInSuccess({id:userSnapshot.id,...userSnapshot.data()}))\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\r\n}\r\n\r\n\r\n\r\n// sign in with email\r\nexport function* signInWithEmail({payload:{email,password}}){\r\n    try{\r\n        // api calls\r\n        const{user}= yield auth.signInWithEmailAndPassword(email,password);\r\n        const userRef=yield call(createUserProfileDocument,user);\r\n        const userSnapshot=yield userRef.get();\r\n        yield put(signInSuccess({id:userSnapshot.id,...userSnapshot.data()}))\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\r\n}\r\n\r\n\r\n// SESSION\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth=yield getCurrentUser();\r\n        if(!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n        }catch(error){\r\n            yield put(signInFailure(error))\r\n        }\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\r\n}\r\n\r\n// SIGN-OUT\r\nexport function* userSignOut(){\r\n    try {\r\n        yield auth.signOut();\r\n        yield put (signOutSuccess());\r\n    } catch (error) {\r\n        yield put (signOutFailure(error));\r\n    }\r\n\r\n}\r\n\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,userSignOut)\r\n}\r\n\r\n// SIGN UP START\r\n\r\nexport function* signUp({payload:{email,password,displayName}}){\r\n    try{\r\n        const{user}= yield auth.createUserWithEmailAndPassword(email, password);\r\n\r\n        yield put(signUpSuccess({user,additionalData:{displayName }}));\r\n    }catch(error){\r\n        yield put (signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp)\r\n}\r\n\r\n//Sign Up SUCCESS\r\nexport function* signInAfterSignUp({payload:{user,additionalData}}){\r\n    yield getSnapshotFromUserAuth(user,additionalData)\r\n}\r\n\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS,signInAfterSignUp)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// root user sagas\r\nexport function* userSagas(){\r\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession),call(onSignOutStart),call(onSignUpStart),call(onSignUpSuccess)])\r\n}"]},"metadata":{},"sourceType":"module"}